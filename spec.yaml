#! spec.yaml

# to run this, in target directory:
# doctl apps create --spec spec.yaml


name: zero2prod
# Check https://www.digitalocean.com/docs/app-platform/#regional-availability
# for a list of all the available options.
# You can get region slugs from
# https://www.digitalocean.com/docs/platform/availability-matrix/
# They must specified lowercased.
# `fra` stands for Frankfurt (Germany - EU)
region: lon1
services:
  - name: zero2prod
  # Relative to the repository root
    dockerfile_path: Dockerfile
    source_dir: .
    github:
# Depending on when you created the repository,
# the default branch on GitHub might have been named `master`
      branch: master
# Deploy a new version on every commit to `main`!
# Continuous Deployment, here we come!
      deploy_on_push: true
# !!! Fill in with your details
# e.g. LukeMathWalker/zero-to-production
      repo: czarop/zero2prod
# Active probe used by DigitalOcean's to ensure our application is healthy
    health_check:
# The path to our health check endpoint!
# It turned out to be useful in the end!
      http_path: /health_check
# The port the application will be listening on for incoming requests
# It should match what we specified in our configuration/production.yaml file!
    http_port: 8000
# For production workloads we'd go for at least two!
# But let's try to keep the bill under control for now...
    instance_count: 1
    instance_size_slug: basic-xxs
# All incoming requests should be routed to our app
    routes:
      - path: /
# environment variables that allow connection to the db
# these are used in configuration.rs
    envs:
      - key: APP_APPLICATION__BASE_URL
        scope: RUN_TIME
        value: ${APP_URL}
      - key: APP_DATABASE__USERNAME
        scope: RUN_TIME # RUN_TIME distinguishes from the variables needed for docker build
        value: ${newsletter.USERNAME}
      - key: APP_DATABASE__PASSWORD
        scope: RUN_TIME
        value: ${newsletter.PASSWORD}
      - key: APP_DATABASE__HOST
        scope: RUN_TIME
        value: ${newsletter.HOSTNAME}
      - key: APP_DATABASE__PORT
        scope: RUN_TIME
        value: ${newsletter.PORT}
      - key: APP_DATABASE__DATABASE_NAME
        scope: RUN_TIME
        value: ${newsletter.DATABASE}
databases:
# PG = Postgres
  - engine: PG
# Database name
    name: newsletter
# Again, let's keep the bill lean
    num_nodes: 1
    size: db-s-dev-database
# Postgres version
    version: "14"
# Redis db - you still need to create a db cluster and put the name below
#  - engine: REDIS
#    name: redis
#    version: "7"
#    production: true
#    num_nodes: 1
#    cluster_name: db-caching-lon1-87569


